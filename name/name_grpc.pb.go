// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.28.3
// source: name.name

package name

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// NameServerClient is the client API for NameServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NameServerClient interface {
	Register(ctx context.Context, in *NameRequest, opts ...grpc.CallOption) (*NameResponse, error)
	Delete(ctx context.Context, in *NameRequest, opts ...grpc.CallOption) (*NameResponse, error)
	KeepAlive(ctx context.Context, opts ...grpc.CallOption) (NameServer_KeepAliveClient, error)
	GetAddr(ctx context.Context, in *NameRequest, opts ...grpc.CallOption) (*NameResponse, error)
}

type nameServerClient struct {
	cc grpc.ClientConnInterface
}

func NewNameServerClient(cc grpc.ClientConnInterface) NameServerClient {
	return &nameServerClient{cc}
}

func (c *nameServerClient) Register(ctx context.Context, in *NameRequest, opts ...grpc.CallOption) (*NameResponse, error) {
	out := new(NameResponse)
	err := c.cc.Invoke(ctx, "/grpc.nameserver.NameServer/Register", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nameServerClient) Delete(ctx context.Context, in *NameRequest, opts ...grpc.CallOption) (*NameResponse, error) {
	out := new(NameResponse)
	err := c.cc.Invoke(ctx, "/grpc.nameserver.NameServer/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nameServerClient) KeepAlive(ctx context.Context, opts ...grpc.CallOption) (NameServer_KeepAliveClient, error) {
	stream, err := c.cc.NewStream(ctx, &NameServer_ServiceDesc.Streams[0], "/grpc.nameserver.NameServer/KeepAlive", opts...)
	if err != nil {
		return nil, err
	}
	x := &nameServerKeepAliveClient{stream}
	return x, nil
}

type NameServer_KeepAliveClient interface {
	Send(*NameRequest) error
	CloseAndRecv() (*NameResponse, error)
	grpc.ClientStream
}

type nameServerKeepAliveClient struct {
	grpc.ClientStream
}

func (x *nameServerKeepAliveClient) Send(m *NameRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *nameServerKeepAliveClient) CloseAndRecv() (*NameResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(NameResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *nameServerClient) GetAddr(ctx context.Context, in *NameRequest, opts ...grpc.CallOption) (*NameResponse, error) {
	out := new(NameResponse)
	err := c.cc.Invoke(ctx, "/grpc.nameserver.NameServer/GetAddr", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NameServerServer is the server API for NameServer service.
// All implementations must embed UnimplementedNameServerServer
// for forward compatibility
type NameServerServer interface {
	Register(context.Context, *NameRequest) (*NameResponse, error)
	Delete(context.Context, *NameRequest) (*NameResponse, error)
	KeepAlive(NameServer_KeepAliveServer) error
	GetAddr(context.Context, *NameRequest) (*NameResponse, error)
	mustEmbedUnimplementedNameServerServer()
}

// UnimplementedNameServerServer must be embedded to have forward compatible implementations.
type UnimplementedNameServerServer struct {
}

func (UnimplementedNameServerServer) Register(context.Context, *NameRequest) (*NameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedNameServerServer) Delete(context.Context, *NameRequest) (*NameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedNameServerServer) KeepAlive(NameServer_KeepAliveServer) error {
	return status.Errorf(codes.Unimplemented, "method KeepAlive not implemented")
}
func (UnimplementedNameServerServer) GetAddr(context.Context, *NameRequest) (*NameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAddr not implemented")
}
func (UnimplementedNameServerServer) mustEmbedUnimplementedNameServerServer() {}

// UnsafeNameServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NameServerServer will
// result in compilation errors.
type UnsafeNameServerServer interface {
	mustEmbedUnimplementedNameServerServer()
}

func RegisterNameServerServer(s grpc.ServiceRegistrar, srv NameServerServer) {
	s.RegisterService(&NameServer_ServiceDesc, srv)
}

func _NameServer_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NameServerServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.nameserver.NameServer/Register",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NameServerServer).Register(ctx, req.(*NameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NameServer_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NameServerServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.nameserver.NameServer/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NameServerServer).Delete(ctx, req.(*NameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NameServer_KeepAlive_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(NameServerServer).KeepAlive(&nameServerKeepAliveServer{stream})
}

type NameServer_KeepAliveServer interface {
	SendAndClose(*NameResponse) error
	Recv() (*NameRequest, error)
	grpc.ServerStream
}

type nameServerKeepAliveServer struct {
	grpc.ServerStream
}

func (x *nameServerKeepAliveServer) SendAndClose(m *NameResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *nameServerKeepAliveServer) Recv() (*NameRequest, error) {
	m := new(NameRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _NameServer_GetAddr_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NameServerServer).GetAddr(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.nameserver.NameServer/GetAddr",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NameServerServer).GetAddr(ctx, req.(*NameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// NameServer_ServiceDesc is the grpc.ServiceDesc for NameServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NameServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpc.nameserver.NameServer",
	HandlerType: (*NameServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Register",
			Handler:    _NameServer_Register_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _NameServer_Delete_Handler,
		},
		{
			MethodName: "GetAddr",
			Handler:    _NameServer_GetAddr_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "KeepAlive",
			Handler:       _NameServer_KeepAlive_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "name.name",
}
